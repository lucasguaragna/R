df_summary <- t(df_summary)
df_summary <- as.data.frame(do.call(rbind, resumo))
# Visualizar o data frame resultante
print(df_summary)
# Desvio padrão:
for(coluna in names(df)){
if (coluna != 'Mês')
print(paste("Desvio padrão de", coluna, ":", sd(df[[coluna]])))
}
# Calcular o summary() para cada coluna do data frame
resumo <- lapply(df, summary)
# Converter o resultado do summary() em um data frame
df_summary <- as.data.frame(do.call(rbind, resumo))
df_summary <- t(df_summary)
# Visualizar o data frame resultante
print(df_summary)
# Desvio padrão:
for(coluna in names(df)){
if (coluna != 'Mês')
print(paste("Desvio padrão de", coluna, ":", sd(df[[coluna]])))
}
# Calcular o summary() para cada coluna do data frame
resumo <- lapply(t(df), summary)
# Converter o resultado do summary() em um data frame
df_summary <- as.data.frame(do.call(rbind, resumo))
# Visualizar o data frame resultante
print(df_summary)
# Desvio padrão:
for(coluna in names(df)){
if (coluna != 'Mês')
print(paste("Desvio padrão de", coluna, ":", sd(df[[coluna]])))
}
# Calcular o summary() para cada coluna do data frame
resumo <- lapply(df, summary)
# Converter o resultado do summary() em um data frame
df_summary <- as.data.frame(do.call(rbind, resumo))
# Visualizar o data frame resultante
print(df_summary)
# Desvio padrão:
for(coluna in names(df)){
if (coluna != 'Mês')
print(paste("Desvio padrão de", coluna, ":", sd(df[[coluna]])))
}
# Calcular o summary() para cada coluna do data frame
resumo <- lapply(df, summary)
# Converter o resultado do summary() em um data frame
df_summary <- as.data.frame(do.call(rbind, resumo))
# Visualizar o data frame resultante
print(df_summary)
# Desvio padrão:
# Calcular o summary() para cada coluna do data frame
resumo <- lapply(df, summary)
# Converter o resultado do summary() em um data frame
df_summary <- as.data.frame(do.call(rbind, resumo))
# Visualizar o data frame resultante
print(df_summary)
# Desvio padrão:
# Função para calcular o desvio padrão de cada linha com base no data frame df_desvio_padrao
calc_desvio_padrao <- function(row) {
sd(row, na.rm = TRUE)
}
# Calcular o desvio padrão de cada linha do data frame df_desvio_padrao
desvios_padrao <- apply(df, 1, calc_desvio_padrao)
# Adicionar a coluna com os valores de desvio padrão no data frame original df
df$Desvio_Padrão <- desvios_padrao
# Visualizar o data frame com a nova coluna de desvio padrão
print(df)
# Calcular o summary() para cada coluna do data frame
resumo <- lapply(df, summary)
# Converter o resultado do summary() em um data frame
df_summary <- as.data.frame(do.call(rbind, resumo))
# Visualizar o data frame resultante
print(df_summary)
# Desvio padrão:
# Função para calcular o desvio padrão de cada linha com base no data frame df_desvio_padrao
calc_desvio_padrao <- function(row) {
sd(row, na.rm = TRUE)
}
# Calcular o desvio padrão de cada linha do data frame df_desvio_padrao
desvios_padrao <- apply(df, 1, calc_desvio_padrao)
# Adicionar a coluna com os valores de desvio padrão no data frame original df
df$Desvio_Padrão <- desvios_padrao
# Visualizar o data frame com a nova coluna de desvio padrão
print(df$Desvio_Padrão)
# Função personalizada para calcular o resumo estatístico e o desvio padrão
summary_with_sd <- function(x) {
resumo <- summary(x)
desvio_padrao <- sd(x, na.rm = TRUE)
return(c(resumo, `Desvio Padrão` = desvio_padrao))
}
# Aplicar a função summary_with_sd() a cada coluna do data frame
df_summary <- sapply(df, summary_with_sd)
# Transformar a matriz resultante em um data frame
df_summary <- as.data.frame(df_summary)
# Visualizar o data frame com o resumo estatístico e o desvio padrão
print(df_summary)
# Função personalizada para calcular o resumo estatístico e o desvio padrão
summary_with_sd <- function(x) {
# Calcula o resumo estatístico (min, 1st quartile, median, mean, 3rd quartile, max) das colunas
resumo <- summary(x)
# Calcula o desvio padrão das colunas, ignorando valores NA (missing values)
desvio_padrao <- sd(x, na.rm = TRUE)
# Retorna um vetor com o resumo estatístico e o desvio padrão concatenados
return(c(resumo, `Desvio Padrão` = desvio_padrao))
}
# Aplicar a função summary_with_sd() a cada coluna do data frame
df_summary <- sapply(df, summary_with_sd)
# Transformar a matriz resultante em um data frame
df_summary <- as.data.frame(df_summary)
# Visualizar o data frame com o resumo estatístico e o desvio padrão
print(df_summary)
for (coluna in names(df)){
print(sd(df[[coluna]]))
}
# Função personalizada para calcular o resumo estatístico e o desvio padrão
summary_with_sd <- function(x) {
# Calcula o resumo estatístico (min, 1st quartile, median, mean, 3rd quartile, max) das colunas
resumo <- summary(x)
# Calcula o desvio padrão das colunas, ignorando valores NA (missing values)
desvio_padrao <- sd(x, na.rm = TRUE)
# Retorna um vetor com o resumo estatístico e o desvio padrão concatenados
return(c(resumo, `Desvio Padrão` = desvio_padrao))
}
# Aplicar a função summary_with_sd() a cada coluna do data frame
df_summary <- sapply(df, summary_with_sd)
# Transformar a matriz resultante em um data frame
df_summary <- as.data.frame(df_summary)
# Excluindo colunas indesejadas:
df$Mês <- NULL
df$Desvio_Padrão <- NULL
# Visualizar o data frame com o resumo estatístico e o desvio padrão
print(df_summary)
# Função personalizada para calcular o resumo estatístico e o desvio padrão
summary_with_sd <- function(x) {
# Calcula o resumo estatístico (min, 1st quartile, median, mean, 3rd quartile, max) das colunas
resumo <- summary(x)
# Calcula o desvio padrão das colunas, ignorando valores NA (missing values)
desvio_padrao <- sd(x, na.rm = TRUE)
# Retorna um vetor com o resumo estatístico e o desvio padrão concatenados
return(c(resumo, `Desvio Padrão` = desvio_padrao))
}
# Aplicar a função summary_with_sd() a cada coluna do data frame
df_summary <- sapply(df, summary_with_sd)
# Transformar a matriz resultante em um data frame
df_summary <- as.data.frame(df_summary)
# Excluindo colunas indesejadas:
df$ <- NULL
# Função personalizada para calcular o resumo estatístico e o desvio padrão
summary_with_sd <- function(x) {
# Calcula o resumo estatístico (min, 1st quartile, median, mean, 3rd quartile, max) das colunas
resumo <- summary(x)
# Calcula o desvio padrão das colunas, ignorando valores NA (missing values)
desvio_padrao <- sd(x, na.rm = TRUE)
# Retorna um vetor com o resumo estatístico e o desvio padrão concatenados
return(c(resumo, `Desvio Padrão` = desvio_padrao))
}
# Aplicar a função summary_with_sd() a cada coluna do data frame
df_summary <- sapply(df, summary_with_sd)
# Transformar a matriz resultante em um data frame
df_summary <- as.data.frame(df_summary)
# Excluindo colunas indesejadas:
df$Mês <- NULL
df$Desvio_Padrão <- NULL
# Visualizar o data frame com o resumo estatístico e o desvio padrão
print(df_summary)
install.packages(kableExtra)
install.packages("kableExtra")
# Função personalizada para calcular o resumo estatístico e o desvio padrão
summary_with_sd <- function(x) {
# Calcula o resumo estatístico (min, 1st quartile, median, mean, 3rd quartile, max) das colunas
resumo <- summary(x)
# Calcula o desvio padrão das colunas, ignorando valores NA (missing values)
desvio_padrao <- sd(x, na.rm = TRUE)
# Retorna um vetor com o resumo estatístico e o desvio padrão concatenados
return(c(resumo, `Desvio Padrão` = desvio_padrao))
}
# Aplicar a função summary_with_sd() a cada coluna do data frame
df_summary <- sapply(df, summary_with_sd)
# Transformar a matriz resultante em um data frame
df_summary <- as.data.frame(df_summary)
# Excluindo colunas indesejadas:
df$Mês <- NULL
df$Desvio_Padrão <- NULL
# Visualizar o data frame com o resumo estatístico e o desvio padrão
print(df_summary)
# Criar a tabela usando kable()
tabela_formatada <- kable(df_summary)
# Função personalizada para calcular o resumo estatístico e o desvio padrão
summary_with_sd <- function(x) {
# Calcula o resumo estatístico (min, 1st quartile, median, mean, 3rd quartile, max) das colunas
resumo <- summary(x)
# Calcula o desvio padrão das colunas, ignorando valores NA (missing values)
desvio_padrao <- sd(x, na.rm = TRUE)
# Retorna um vetor com o resumo estatístico e o desvio padrão concatenados
return(c(resumo, `Desvio Padrão` = desvio_padrao))
}
# Aplicar a função summary_with_sd() a cada coluna do data frame
df_summary <- sapply(df, summary_with_sd)
# Transformar a matriz resultante em um data frame
df_summary <- as.data.frame(df_summary)
# Excluindo colunas indesejadas:
df$Mês <- NULL
df$Desvio_Padrão <- NULL
# Visualizar o data frame com o resumo estatístico e o desvio padrão
print(df_summary)
library(kableExtra)
# Criar a tabela usando kable()
tabela_formatada <- kable(df_summary)
# Aplicar estilo usando kable_styling()
tabela_formatada_estilizada <- kable_styling(tabela_formatada, full_width = FALSE)
# Visualizar a tabela estilizada
tabela_formatada_estilizada
# Função personalizada para calcular o resumo estatístico e o desvio padrão
summary_with_sd <- function(x) {
# Calcula o resumo estatístico (min, 1st quartile, median, mean, 3rd quartile, max) das colunas
resumo <- summary(x)
# Calcula o desvio padrão das colunas, ignorando valores NA (missing values)
desvio_padrao <- sd(x, na.rm = TRUE)
# Retorna um vetor com o resumo estatístico e o desvio padrão concatenados
return(c(resumo, `Desvio Padrão` = desvio_padrao))
}
# Aplicar a função summary_with_sd() a cada coluna do data frame
df_summary <- sapply(df, summary_with_sd)
# Transformar a matriz resultante em um data frame
df_summary <- as.data.frame(df_summary)
# Excluindo colunas indesejadas:
df$Mês <- NULL
df$Desvio_Padrão <- NULL
# Visualizar o data frame com o resumo estatístico e o desvio padrão
#print(df_summary)
library(kableExtra)
# Criar a tabela usando kable()
tabela_formatada <- kable(df_summary)
# Aplicar estilo usando kable_styling()
tabela_formatada_estilizada <- kable_styling(tabela_formatada, full_width = FALSE)
# Visualizar a tabela estilizada
tabela_formatada_estilizada
# Função para remover caracteres não numéricos dos valores
remove_caracteres_nao_numericos <- function(x) {
gsub("[^[:digit:].]", "", x)
}
# Aplicar a função de remoção de caracteres não numéricos a todas as colunas do data frame
dados[, -1] <- lapply(dados[, -1], remove_caracteres_nao_numericos)
# Substituir "null" por NA
dados[dados == "null"] <- NA
# Converter os valores para o formato numérico
dados[, -1] <- sapply(dados[, -1], as.numeric)
# Substituir "0.372" por "37.2" na coluna 'Unidade Contagem'
dados$`Unidade Contagem`[dados$`Unidade Contagem` == 0.372] <- 37.2
dados$`Unidade BH Pampulha`[dados$`Unidade BH Pampulha` == 781.0] <- 78.1
dados$`Unidade BH Belvedere`[dados$`Unidade BH Belvedere` == 0.522] <- 52.2
dados$`Unidade Contagem`[dados$`Unidade Contagem` == 0.441] <- 44.1
# Filtrar o data frame mantendo apenas as linhas completas (sem NA)
dados_sem_na <- dados[complete.cases(dados), ]
# Excluir as duas primeiras linhas do data frame 'dados' --> são de meses distantes.
dados_sem_primeiras_linhas <- dados_sem_na[-c(1, 2), ]
# Visualizar o data frame resultante
df <- dados_sem_primeiras_linhas
library(kableExtra)
# Criar a tabela usando kable()
tabela_formatada <- kable(df)
# Aplicar estilo usando kable_styling()
tabela_formatada_estilizada <- kable_styling(tabela_formatada, full_width = FALSE)
# Visualizar a tabela estilizada
tabela_formatada_estilizada
library(readxl)
dados <- read_xlsx(path = "Base de dados_etapa Medição.xlsx")
library(kableExtra)
# Criar a tabela usando kable()
tabela_formatada <- kable(dados)
# Aplicar estilo usando kable_styling()
tabela_formatada_estilizada <- kable_styling(tabela_formatada, full_width = FALSE)
# Visualizar a tabela estilizada
tabela_formatada_estilizada
# Plotando o gráfico na cor preta, sem a caixa ao seu redor, Definindo o nome dos eixos
plot(df,
type = "b",
main = "NS Atendimento ao longo dos meses",
col = "black",
bty="n",
xlab="Mês (unidade)",
ylab="NS Atendimento (%)",
xaxt = "n",
yaxt = "n")
plot(df$Mês, df$`Unidade BH Centro`)
plot(df$Mês, df$`Unidade BH Centro`)
print(df)
plot(df$Mês, df$`Unidade BH Centro`,
xlab = "Mês", ylab = "NS Atendimento",
main = "Gráfico Sequencial")
print(df)
plot(df$Mês, df$`Unidade BH Centro`,
type = "n",
xlab = "Mês", ylab = "NS Atendimento",
main = "Gráfico Sequencial",
)
print(df)
plot(df$Mês, df$`Unidade BH Centro`,
type = "n",
xlab = "Mês", ylab = "NS Atendimento",
main = "Gráfico Sequencial",
)
points(x = df$Mês, y = df$`Unidade BH Centro`)
plot(df$Mês, df$`Unidade BH Centro`,
type = "n", xaxt = "n", yaxt = "n",
xlab = "Mês", ylab = "NS Atendimento",
main = "Gráfico Sequencial",
)
points(x = df$Mês, y = df$`Unidade BH Centro`)
box
plot(df$Mês, df$`Unidade BH Centro`,
type = "n", xaxt = "n", yaxt = "n", bty = "l"
xlab = "Mês", ylab = "NS Atendimento",
plot(df$Mês, df$`Unidade BH Centro`,
type = "n", xaxt = "n", yaxt = "n", bty = "n"
xlab = "Mês", ylab = "NS Atendimento",
plot(df$Mês, df$`Unidade BH Centro`,
type = "n", xaxt = "n", yaxt = "n", bty = "n"
xlab = "Mês", ylab = "NS Atendimento",
plot(df$Mês, df$`Unidade BH Centro`,
type = "n", xaxt = "n", yaxt = "n", bty = "l",
xlab = "Mês", ylab = "NS Atendimento",
main = "Gráfico Sequencial",
)
points(x = df$Mês, y = df$`Unidade BH Centro`)
plot(df$Mês, df$`Unidade BH Centro`,
xaxt = "n", yaxt = "n", bty = "l",
xlab = "Mês", ylab = "NS Atendimento",
main = "Gráfico Sequencial",
)
points(x = df$Mês, y = df$`Unidade BH Centro`)
plot(df$Mês, df$`Unidade BH Centro`,
bty = "l",
xlab = "Mês", ylab = "NS Atendimento",
main = "Gráfico Sequencial",
)
points(x = df$Mês, y = df$`Unidade BH Centro`)
plot(df$Mês, df$`Unidade BH Centro`,
bty = "l", type = "b",
xlab = "Mês", ylab = "NS Atendimento",
main = "Gráfico Sequencial",
)
points(x = df$Mês, y = df$`Unidade BH Centro`)
plot(df$Mês, df$`Unidade BH Centro`,
bty = "l", # Caixa do gráfico em L
type = "b", # pontos ligados
xlab = "Mês", ylab = "NS Atendimento", # Legenda
main = "Gráfico Sequencial",
)
points(x = df$Mês, y = df$`Unidade BH Centro`)
plot(df$Mês, df$`Unidade BH Centro`,
bty = "l", # Caixa do gráfico em L
type = "b", # Pontos Ligados
xlab = "Mês", ylab = "NS Atendimento", # Nome Eixos
main = "Gráfico Sequencial", # Título
)
points(x = df$Mês, y = df$`Unidade BH Centro`)
plot(df$Mês, df$`Unidade BH Centro`,
bty = "l", # Caixa do gráfico em L
type = "b", # Pontos Ligados
xlab = "Mês", ylab = "NS Atendimento", # Nome Eixos
main = "Gráfico Sequencial", # Título
)
plot_grafico_sequencial <- function(coluna){
plot(df$Mês, df$coluna,
bty = "l", # Caixa do gráfico em L
type = "b", # Pontos Ligados
xlab = "Mês", ylab = "NS Atendimento", # Nome Eixos
main = "Gráfico Sequencial", # Título
)
}
for (coluna in names(df)){
if (coluna != "Mês")
plot_grafico_sequencial(coluna)
}
plot_grafico_sequencial <- function(coluna){
plot(df$Mês, df$coluna,
bty = "l", # Caixa do gráfico em L
type = "b", # Pontos Ligados
xlab = "Mês", ylab = "NS Atendimento", # Nome Eixos
main = sprintf("Gráfico Sequencial %s", coluna), # Título
)
}
for (coluna in names(df)){
if (coluna != "Mês"){
#plot_grafico_sequencial(coluna)
print(coluna)
print(df[[coluna]])
}
}
for (coluna in names(df)){
plot(df$Mês, df$coluna,
bty = "l", # Caixa do gráfico em L
type = "b", # Pontos Ligados
xlab = "Mês", ylab = "NS Atendimento", # Nome Eixos
main = "Gráfico Sequencial", # Título
)
}
for (coluna in names(df)){
plot(df$Mês, df$`coluna`,
bty = "l", # Caixa do gráfico em L
type = "b", # Pontos Ligados
xlab = "Mês", ylab = "NS Atendimento", # Nome Eixos
main = "Gráfico Sequencial", # Título
)
}
for (coluna in names(df)){
plot(df$Mês, df[[coluna]],
bty = "l", # Caixa do gráfico em L
type = "b", # Pontos Ligados
xlab = "Mês", ylab = "NS Atendimento", # Nome Eixos
main = "Gráfico Sequencial", # Título
)
}
for (coluna in names(df)){
plot(df$Mês, df[[coluna]],
bty = "l", # Caixa do gráfico em L
type = "b", # Pontos Ligados
xlab = "Mês", ylab = "NS Atendimento", # Nome Eixos
main = sprintf("Gráfico Sequencial de %s), coluna) # Título
)
}
for (coluna in names(df)){
plot(df$Mês, df[[coluna]],
bty = "l", # Caixa do gráfico em L
type = "b", # Pontos Ligados
xlab = "Mês", ylab = "NS Atendimento", # Nome Eixos
main = sprintf("Gráfico Sequencial de %s", coluna) # Título
)
}
for (coluna in names(df)){
if(coluna != "Mês"){
plot(df$Mês, df[[coluna]],
bty = "l", # Caixa do gráfico em L
type = "b", # Pontos Ligados
xlab = "Mês", ylab = "NS Atendimento", # Nome Eixos
main = sprintf("Gráfico Sequencial de %s", coluna) # Título
)
}
}
# Plotando cada um dos gráficos
for (coluna in names(df)){
if(coluna != "Mês"){
plot(df$Mês, df[[coluna]],
bty = "l", # Caixa do gráfico em L
type = "b", # Pontos Ligados
xlab = "Mês", ylab = "NS Atendimento", # Nome Eixos
main = sprintf("Gráfico Sequencial de %s", coluna) # Título
)
}
}
# Plotando cada um dos gráficos
for (coluna in names(df)){
if(coluna != "Mês"){
plot(df$Mês, df[[coluna]],
bty = "l", # Caixa do gráfico em L
type = "b", # Pontos Ligados
xlab = "Mês", ylab = "NS Atendimento", # Nome Eixos
main = sprintf("Gráfico Sequencial de %s", coluna) # Título de cada um dos gráficos
)
}
}
# Plotando cada um dos gráficos
for (coluna in names(df)){
if(coluna != "Mês"){
# Verificar se os vetores têm o mesmo comprimento
if (length(df$Mês) == length(df[[coluna]])) {
plot(df$Mês, df[[coluna]],
bty = "l", # Caixa do gráfico em L
type = "b", # Pontos Ligados
xlab = "Mês", ylab = "NS Atendimento", # Nome Eixos
main = sprintf("Gráfico Sequencial de %s", coluna) # Título de cada um dos gráficos
)
} else {
# Caso os vetores não tenham o mesmo comprimento, exibir uma mensagem de erro
cat(sprintf("Erro: Os vetores 'Mês' e '%s' têm tamanhos diferentes.\n", coluna))
}
}
}
# Plotando cada um dos gráficos
for (coluna in names(df)){
if(coluna != "Mês"){
plot(df$Mês, df[[coluna]],
bty = "l", # Caixa do gráfico em L
type = "b", # Pontos Ligados
xlab = "Mês", ylab = "NS Atendimento", # Nome Eixos
main = sprintf("Gráfico Sequencial de %s", coluna) # Título de cada um dos gráficos
)
}
}
# Plotando cada um dos gráficos
for (coluna in names(df)){
if(coluna != "Mês"){
plot(df$Mês, df[[coluna]],
bty = "l", # Caixa do gráfico em L
type = "b", # Pontos Ligados
xlab = "Mês", ylab = "NS Atendimento", # Nome Eixos
main = sprintf("Gráfico Sequencial de %s", coluna) # Título de cada um dos gráficos
)
}
}
# Plotando cada um dos gráficos
for (coluna in names(df)){
if(coluna != "Mês"){
plot(df$Mês, df[[coluna]],
bty = "l", # Caixa do gráfico em L
type = "b", # Pontos Ligados
xlab = "Mês", ylab = "NS Atendimento", # Nome Eixos
main = sprintf("Gráfico Sequencial de %s", coluna) # Título de cada um dos gráficos
)
}
}
